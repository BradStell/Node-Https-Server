     //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////
  /////                 Brad Stell 1/10/16                        //////
 ////                   Modified: 1/14/16                         /////
///                                                                ///
//      Node.js module for handling encryption and decryption       //
//                                                                  //
//  Calls the jar file JBSEncryption for handling the encryption.   //
//  This module is async and will execute in the background so      //
//  that calling code can continue to run until a result is done.   //
//  This module supports (requires) a callback function to be       //
//  sent in, and will execute the callback funtion after the encr-  //
//  encryption / decryption is done. The callback funtion has two   //
//  parameters: an error object if there was an error, and a        //
//  string representing the encrypted or decrypted text.            //
//                                                                  //
/////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
////////////////////////////////////////////
/////////////////////////////
///////////////
///////
//




// Chile process library
var spawn = require('child_process').spawn;


/**
 *   Encryption method | runs asyncronously
 *
 *   Encrypts a JSON object or a string of text, executes callback funtion when complete
 */
function encrypt(data, callback) {

    if (typeof(callback) !== 'function') console.log("Second parameter must be a callback function");

    else {
        process.nextTick(function() {

            var crypto = spawn('cmd.exe', 
                [
                    '/c',
                    'java',
                    '-jar',
                    'JBSCrypto.jar',
                    '-e',
                    '-c',
                    ((typeof(data) === 'string') ? data : JSON.stringify(data)),
                    '-c'
                ]);

            var myStr = '';
            var myErr = '';
            var error = false;

            crypto.stdout.on('data', (encrypted) => {
                myStr += encrypted;
            });

            crypto.stderr.on('data', (resp) => {
                error = true;
                myErr += resp;
            });

            crypto.on('close', (code) => {
                if (error)
                    callback(myErr, null);
                else
                    callback(null, myStr);
            });
        });
    } 
}

/**
 *   Decryption method | runs asyncronously
 *
 *   Decrypts a string back to original form as a string. If a JSON object then calling code
 *  needs to run JSON.parse(output); to transform code back to a JSON object. 
 */
function decrypt(data, callback) {

    if (typeof(data) !== 'string') console.log("First parameter must be a base64 encrypted string");

    if (typeof(callback) !== 'function') console.log("Second parameter must be a callback function");

    else {
        process.nextTick(function() {

            var myprogram = spawn('cmd.exe', ['/c', 'java', '-jar', 'JBSCrypto.jar', '-d', '-c', data, '-c']);
            var myStr = '';

            myprogram.stdout.on('data', (encrypted) => {
                myStr += encrypted;
            });
            
            myprogram.stdout.on('end', () => {
               callback(null, myStr);
            });
        });
    } 
}


// Nodejs module exports (can access encrypt and decrypt functions from outside code that requires this module)
exports.encrypt = encrypt;
exports.decrypt = decrypt;